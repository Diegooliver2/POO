-Headers


#ifndef VETOR_H
#define VETOR_H

class Vetor{
private:
    float x;
    float y;

public:
    //funcao construtor
    //construtor default
  //Vetor();

    //Construtor com argumentos
    Vetor(float mx = 0, float my = 0);
  //Vetor(float mxy);

    //Construtor de c√≥pia
    //&v referencia para v
    Vetor(Vetor&v);

    //Destrutor
    ~Vetor();

    void setX(float mx);
    float getX(void);
    void setY(float mt);
    float getY(void);
    float tamanho(void);
    float angulo(void);
    Vetor unitario(void);
    void print(void);
    float escalar(Vetor v2);

    //Sobrecarga de metodos
    Vetor soma(Vetor v2);
    Vetor soma(float a);
};

#endif // VETOR_H

--------------------------------------------------------------------------------------------------------
-main.cpp


#include <iostream>
#include <cmath>
#include "vetor.h"

using namespace std;

int main()
{
    Vetor v1, v2, v3;
    Vetor v4(4,5);

    //Criacao com copia
    Vetor v5 = v4, v6(v4);
    cout << "v1.x = " << v1.getX() << endl;
    cout << "v1.y = " << v1.getY() << endl;

    v1.setX(3); v1.setY(4);
    cout << "v1.x = " << v1.getX() << endl;
    cout << "v1.y = " << v1.getY() << endl;
    cout << "Tamanho = " << v1.tamanho() << endl;
    cout << "Angulo = " << v1.angulo() << " graus" << endl;
    v2 = v1.unitario();
    cout << "Vetor unitario = (" << v2.getX() << "," << v2.getY() << ")\n" << endl;
    cout << "Escalar = " << v1.escalar(v2) << endl;

    return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

vetor.cpp


#include "vetor.h"
#include <iostream>
#include <cmath>

//implementacao do metodo setX
// no ESCOPO(::) da classe Vetor
using namespace std;

//Contrutor padrao
Vetor::Vetor(){
    x = 0;
    y = 0;
    cout << "Chamou o construtor\n";
}

//construtor com argumentos
Vetor::Vetor(float mx,float my){
    x = mx; y = my;
}

Vetor::Vetor(float mxy){
    x = y = mxy;
}

//Construtor de copia
//&v referencia para v
Vetor::Vetor(Vetor &v){
    cout << "Construtor de copia\n";
    x = v.x; y = v.y;
}

//Destrutor
Vetor::~Vetor(){
    cout << "chamou o destrutor\n" << endl;
}

void Vetor::setX(float mx){
    x = mx;
}

void Vetor::setY(float my){
    y = my;
}

float Vetor::getX(void){
    return x;
}

float Vetor::getY(void){
    return y;
}

float Vetor::tamanho(void){
    return sqrt(x*x+y*y);
}

float Vetor::angulo(void){
    return (180/3.141592654)*atan(y/x);
}

Vetor Vetor::unitario(void){
    Vetor ret;
    ret.x = x / tamanho();
    ret.y = y / tamanho();
    return ret;
}

void Vetor::print(void){
    cout << "(" << x << "," << y << ")";
}

float Vetor::escalar(Vetor v2){
    return x*v2.x + y*v2.y;
}

Vetor Vetor::soma(Vetor v2){
   Vetor ret;
    ret.x = x + v2.x;
    ret.y = y + v2.y;

    return ret;
}

//Sobrecarga do metodo soma
Vetor Vetor::soma(float a){
    Vetor ret;
    ret.x = x + a;
    ret.y = y + a;
    return ret;
}

